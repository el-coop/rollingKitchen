<?php

namespace Tests\Feature\Admin\Settings;

use App\Models\Admin;
use App\Models\Kitchen;
use App\Models\Pdf;
use App\Models\User;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class FileSystemTest extends TestCase {
    use RefreshDatabase;
    use WithFaker;
    protected $admin;
    protected $kitchen;
    protected $pdf;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->admin = factory(Admin::class)->create();
        $this->admin->user()->save(factory(User::class)->make());
        $this->kitchen = factory(Kitchen::class)->create();
        $this->kitchen->user()->save(factory(User::class)->make());
        Storage::fake('local');
        $pdf = UploadedFile::fake()->create('first.pdf');
        $path = $pdf->store('public/pdf');
        $this->pdf = factory(Pdf::class)->create([
            'name' => 'first',
            'file' => basename($path)
        ]);


    }

    public function test_guest_cant_see_page() {
        $this->get(action('Admin\PDFController@index'))->assertRedirect(action('Auth\LoginController@login'));
    }

    public function test_kitchen_cant_see_page() {
        $this->actingAs($this->kitchen->user)->get(action('Admin\PDFController@index'))->assertForbidden();
    }

    public function test_admin_can_see_page() {
        $this->actingAs($this->admin->user)->get(action('Admin\PDFController@index'))
            ->assertStatus(200)
            ->assertSee(__('admin/settings.files'));
    }

    public function test_guest_cant_upload_pdf() {
        $pdf = UploadedFile::fake()->create('test.pdf');
        $this->post(action('Admin\PDFController@upload'), ['name' => 'newPDF', 'file' => $pdf])->assertRedirect(action('Auth\LoginController@login'));
    }

    public function test_kitchen_cant_upload_pdf() {
        $pdf = UploadedFile::fake()->create('test.pdf');
        $this->actingAs($this->kitchen->user)->post(action('Admin\PDFController@upload'), ['name' => 'newPDF', 'file' => $pdf])->assertForbidden();
    }

    public function test_admin_can_upload_pdf() {
        $pdf = UploadedFile::fake()->create('test.pdf');
        $this->actingAs($this->admin->user)->post(action('Admin\PDFController@upload'), ['name' => 'newPDF', 'file' => $pdf])->assertSuccessful();
        $this->assertDatabaseHas('pdfs', ['name' => 'newPDF']);
        $pdf = Pdf::where('name', 'newPDF')->first();
        Storage::disk('local')->assertExists('public/pdf/' . $pdf->file);
    }

    public function test_guest_cant_destroy_pdf() {
        $this->delete(action('Admin\PDFController@destroy', $this->pdf))->assertRedirect(action('Auth\LoginController@login'));
    }

    public function test_kitchen_cant_destroy_pdf() {
        $this->actingAs($this->kitchen->user)->delete(action('Admin\PDFController@destroy', $this->pdf))->assertForbidden();
    }
    public function test_admin_can_destroy_pdf() {
        $path = $this->pdf->file;
        $this->actingAs($this->admin->user)->delete(action('Admin\PDFController@destroy', $this->pdf))->assertSuccessful();
        $this->assertDatabaseMissing('pdfs', ['name' => 'first']);
        Storage::disk('local')->assertMissing($path);
    }
}
