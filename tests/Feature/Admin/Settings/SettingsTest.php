<?php

namespace Tests\Feature\Admin\Settings;

use App\Models\Admin;
use App\Models\Kitchen;
use App\Models\User;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;
use ElCoop\Valuestore\Valuestore;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class SettingsTest extends TestCase {
	use RefreshDatabase;
	use WithFaker;
	protected $admin;
	protected $kitchen;

	protected function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->admin = factory(Admin::class)->create();
		$this->admin->user()->save(factory(User::class)->make());
		$this->kitchen = factory(Kitchen::class)->create();
		$this->kitchen->user()->save(factory(User::class)->make());
		Storage::fake('local');
		Storage::disk('local')->put('test.valuestore.json', '');
		$path = Storage::path('test.valuestore.json');
		$this->app->singleton('settings', function ($app) use ($path) {
			return new Valuestore($path);
		});
		$faker = $this->faker;
		$settings = app('settings');
		$settings->put('invoices_accountant', $faker->email);
		$settings->put('general_registration_status', false);
		$settings->put('general_application_text_en', $faker->text);
		$settings->put('general_application_text_nl', $faker->text);
		$settings->put('general_registration_text_nl', $faker->text);
		$settings->put('general_registration_text_en', $faker->text);
		$settings->put('general_login_text_en', $faker->text);
		$settings->put('general_login_text_nl', $faker->text);
		$settings->put('registration_year', 2019);


	}

	public function test_guest_cant_see_page() {
		$this->get(action('Admin\SettingsController@show'))->assertRedirect(action('Auth\LoginController@login'));
	}

	public function test_kitchen_cant_see_page() {
		$this->actingAs($this->kitchen->user)->get(action('Admin\SettingsController@show'))->assertForbidden();
	}

	public function test_admin_can_see_page() {
		$this->actingAs($this->admin->user)->get(action('Admin\SettingsController@show'))
			->assertStatus(200)
			->assertSee(__('admin/settings.invoices_accountant'));
	}

	public function test_guest_cant_update_settings() {
		$this->patch(action('Admin\SettingsController@update'), [
			'invoices_accountant' => 'test@test.com',
			'general_application_text_en' => 'test',
			'general_application_text_nl' => 'testtest',
			'general_registration_text_en' => 'regtest',
			'general_registration_text_nl' => 'regtestnl',
			'general_login_text_en' => 'logintest',
			'general_login_text_nl' => 'logintestnl'
		])->assertRedirect(action('Auth\LoginController@login'));
	}

	public function test_kitchen_cant_update_settings() {
		$this->actingAs($this->kitchen->user)->patch(action('Admin\SettingsController@update'), [
			'invoices_accountant' => 'test@test.com',
			'general_application_text_en' => 'test',
			'general_application_text_nl' => 'testtest',
			'general_registration_text_en' => 'regtest',
			'general_registration_text_nl' => 'regtestnl',
			'general_login_text_en' => 'logintest',
			'general_login_text_nl' => 'logintestnl'
		])->assertForbidden();
	}

	public function test_admin_can_update_settings() {
		$settings = [
			'invoices_accountant' => 'test@test.com',
			'general_application_text_en' => 'test',
			'general_application_text_nl' => 'testtest',
			'general_registration_text_en' => 'regtest',
			'general_registration_text_nl' => 'regtestnl',
			'general_login_text_en' => 'logintest',
			'general_login_text_nl' => 'logintestnl',
			'registration_year' => '2019'

		];
		$this->actingAs($this->admin->user)->patch(action('Admin\SettingsController@update'), $settings)->assertRedirect();
		$settings['general_registration_status'] = false;
		$this->assertEquals($settings, $this->app->settings->all());
	}
}
