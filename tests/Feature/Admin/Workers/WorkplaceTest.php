<?php

namespace Admin\Kitchens\Workers;

use App\Models\Accountant;
use App\Models\Admin;
use App\Models\Kitchen;
use App\Models\User;
use App\Models\WorkFunction;
use App\Models\Workplace;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class WorkplaceTest extends TestCase {
	use RefreshDatabase;
	protected $admin;
	protected $accountant;
	protected $kitchen;
	protected $workplaces;

	protected function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->admin = Admin::factory()->create();
		$this->admin->user()->save(User::factory()->make());
		$this->kitchen = Kitchen::factory()->create();
		$this->kitchen->user()->save(User::factory()->make());
		$this->accountant = User::factory()->make();
		Accountant::factory()->create()->user()->save($this->accountant);
		$this->workplaces = Workplace::factory(10)->create()->each(function ($workplace) {
            WorkFunction::factory(3)->make()->each(function ($workFunction) use ($workplace) {
				$workplace->workFunctions()->save($workFunction);
			});
		});
	}

	/**
	 * A basic test example.
	 *
	 * @return void
	 */
	public function test_guest_cant_see_page() {
		$this->get(action('Admin\WorkplaceController@index'))->assertRedirect(action('Auth\LoginController@login'));
	}

	public function test_kitchen_cant_see_page() {
		$this->actingAs($this->kitchen->user)->get(action('Admin\WorkplaceController@index'))->assertForbidden();
	}

	public function test_accountant_cant_see_page() {
		$this->actingAs($this->accountant)->get(action('Admin\WorkplaceController@index'))->assertForbidden();
	}

	public function test_admin_can_see_page() {
		$this->actingAs($this->admin->user)->get(action('Admin\WorkplaceController@index'))->assertSuccessful()->assertSee('</datatable>', false);
	}

	public function test_datatable_gets_data() {
		$response = $this->actingAs($this->admin->user)->get(action('DatatableController@list', ['table' => 'admin.workplacesTable', 'per_page' => 20]));
		foreach ($this->workplaces as $workplace) {
			$response->assertJsonFragment([
				'id' => $workplace->id,
				'name' => $workplace->name
			]);
		}
	}

	public function test_guest_cant_create_workplace() {
		$this->get(action('Admin\WorkplaceController@create'))->assertRedirect(action('Auth\LoginController@login'));
	}

	public function test_kitchen_cant_create_workplace() {
		$this->actingAs($this->kitchen->user)->get(action('Admin\WorkplaceController@create'))->assertForbidden();
	}

	public function test_accountant_cant_create_workplace() {
		$this->actingAs($this->accountant)->get(action('Admin\WorkplaceController@create'))->assertForbidden();
	}

	public function test_admin_can_create_workplace() {
		$this->actingAs($this->admin->user)->get(action('Admin\WorkplaceController@create'))->assertSuccessful()
			->assertJsonFragment([
				'name' => 'name',
				'label' => __('global.name'),
				'type' => 'text',
				'value' => null
			])->assertJsonFragment([
				'name' => 'workFunctions',
				'value' => []
			]);
	}

	public function test_guest_cant_store_workplace() {
		$this->post(action('Admin\WorkplaceController@store'))->assertRedirect(action('Auth\LoginController@login'));
	}

	public function test_kitchen_cant_store_workplace() {
		$this->actingAs($this->kitchen->user)->post(action('Admin\WorkplaceController@store'))->assertForbidden();
	}

	public function test_admin_can_store_workplace() {
		$this->actingAs($this->admin->user)->post(action('Admin\WorkplaceController@store'), [
			'name' => 'new workplace'
		])->assertSuccessful()
			->assertJsonFragment([
				'name' => 'new workplace'
			]);
		$this->assertDatabaseHas('workplaces', ['name' => 'new workplace']);
	}

	public function test_guest_cant_delete_workplace() {
		$this->delete(action('Admin\WorkplaceController@destroy', $this->workplaces->first()))->assertRedirect(action('Auth\LoginController@login'));
	}

	public function test_kitchen_cant_delete_workplace() {
		$this->actingAs($this->kitchen->user)->delete(action('Admin\WorkplaceController@destroy', $this->workplaces->first()))->assertForbidden();
	}

	public function test_accountant_cant_delete_workplace() {
		$this->actingAs($this->accountant)->delete(action('Admin\WorkplaceController@destroy', $this->workplaces->first()))->assertForbidden();
	}


	public function test_admin_can_delete_workplace() {
		$this->actingAs($this->admin->user)->delete(action('Admin\WorkplaceController@destroy', $this->workplaces->first()))->assertSuccessful();
		$this->assertDatabaseMissing('workplaces', ['id' => $this->workplaces->first()->id]);
	}

	public function test_guest_cant_get_workplace_full_data() {
		$this->get(action('Admin\WorkplaceController@edit', $this->workplaces->first()))->assertRedirect(action('Auth\LoginController@login'));
	}

	public function test_kitchen_cant_get_workplace_full_data() {
		$this->actingAs($this->kitchen->user)->get(action('Admin\WorkplaceController@edit', $this->workplaces->first()))->assertForbidden();
	}

	public function test_accountant_cant_get_workplace_full_data() {
		$this->actingAs($this->accountant)->get(action('Admin\WorkplaceController@edit', $this->workplaces->first()))->assertForbidden();
	}

	public function test_admin_can_get_workplace_full_data() {
		$response = $this->actingAs($this->admin->user)->get(action('Admin\WorkplaceController@edit', $this->workplaces->first()))
			->assertSuccessful()
			->assertJsonFragment([
				'name' => 'name',
				'label' => __('global.name'),
				'type' => 'text',
				'value' => $this->workplaces->first()->name
			]);
		foreach ($this->workplaces->first()->workFunctions as $workFunction) {
			$response->assertJsonFragment([
				'id' => $workFunction->id,
				'name' => $workFunction->name,
				'payment_per_hour_before_tax' => $workFunction->payment_per_hour_before_tax,
				'payment_per_hour_after_tax' => $workFunction->payment_per_hour_after_tax
			]);
		}
	}

	public function test_guest_cant_update_workplace() {
		$this->patch(action('Admin\WorkplaceController@update', $this->workplaces->first()))->assertRedirect(action('Auth\LoginController@login'));
	}

	public function test_kitchen_cant_update_workplace() {
		$this->actingAs($this->kitchen->user)->patch(action('Admin\WorkplaceController@update', $this->workplaces->first()))->assertForbidden();
	}

	public function test_accountant_cant_update_workplace() {
		$this->actingAs($this->accountant)->patch(action('Admin\WorkplaceController@update', $this->workplaces->first()))->assertForbidden();
	}

	public function test_admin_can_update_workplace() {
		$this->actingAs($this->admin->user)->patch(action('Admin\WorkplaceController@update',
			$this->workplaces->first()
		), [
			'name' => 'new name'
		])->assertSuccessful()
			->assertJsonFragment([
				'name' => 'new name',
				'id' => $this->workplaces->first()->id
			]);
		$this->assertDatabaseHas('workplaces', ['name' => 'new name', 'id' => $this->workplaces->first()->id]);
	}
}
