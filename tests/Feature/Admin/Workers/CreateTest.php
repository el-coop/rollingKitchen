<?php

namespace Tests\Feature\Admin\Workers;

use App\Models\Admin;
use App\Models\Kitchen;
use App\Models\User;
use App\Models\Worker;
use App\Models\WorkFunction;
use App\Models\Workplace;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CreateTest extends TestCase {
	
	use RefreshDatabase;
	use WithFaker;
	protected $admin;
	protected $kitchen;
	protected $workplaces;
	protected $worker;
	
	protected function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->admin = factory(User::class)->make();
		factory(Admin::class)->create()->user()->save($this->admin);
		$this->kitchen = factory(User::class)->make();
		factory(Kitchen::class)->create()->user()->save($this->kitchen);
		$this->worker = factory(User::class)->make();
		factory(Worker::class)->create()->user()->save($this->worker);
		$this->workplaces = factory(Workplace::class, 10)->create()->each(function ($workplace) {
			factory(WorkFunction::class, 3)->make()->each(function ($workFunction) use ($workplace) {
				$workplace->workFunctions()->save($workFunction);
			});
		});
	}
	
	public function test_guest_cant_see_worker_form() {
		$this->get(action('Admin\WorkerController@create'))->assertRedirect(action('Auth\LoginController@login'));
	}
	
	public function test_kitchen_cant_see_worker_form() {
		$this->actingAs($this->kitchen)->get(action('Admin\WorkerController@create'))->assertForbidden();
	}
	
	public function test_worker_cant_see_worker_form() {
		$this->actingAs($this->worker)->get(action('Admin\WorkerController@create'))->assertForbidden();
	}
	
	public function test_admin_can_create_workplace() {
		$this->actingAs($this->admin->user)->get(action('Admin\WorkplaceController@create'))->assertSuccessful()
			->assertJsonFragment([
				'name' => 'name',
				'label' => __('global.name'),
				'type' => 'text',
				'value' => null
			])->assertJsonFragment([
				'name' => 'workFunctions',
				'value' => []
			]);
	}
}
