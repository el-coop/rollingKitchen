<?php

namespace Tests\Unit\ElCoop;

use ElCoop\valuestore\Valuestore;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ValuestoreTest extends TestCase {

	protected $path;

	protected function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		Storage::fake('local');
		Storage::disk('local')->put('test.json', json_encode([
			'one' => 'test',
			'two' => 'test2',
			'two_two' => 'test2'
		]));
		Storage::disk('local')->put('settings.text', '');
		$this->path = Storage::path('test.json');
	}

	public function test_file_doesnt_exists() {
		$this->expectExceptionMessage('Settings file not found');
		$valuestore = new Valuestore('nofile');

	}

	public function test_file_not_json() {
		$path = Storage::path('settings.text');
		$this->expectExceptionMessage('File is not json');
		$valuestore = new Valuestore($path);
	}

	public function test_file_is_json() {
		$valuestore = new Valuestore($this->path);
		$this->assertInstanceOf(Valuestore::class, $valuestore);
	}

	public function test_all() {
		$valuestore = new Valuestore($this->path);
		$this->assertEquals([
			'one' => 'test',
			'two' => 'test2',
			'two_two' => 'test2'
		], $valuestore->all());
	}

	public function test_put() {
		$valuestore = new Valuestore($this->path);
		$valuestore->put('test', true);
		$this->assertContains(['test' => true], $valuestore->all());
	}

	public function test_put_name_not_string() {
		$valuestore = new Valuestore($this->path);
		$this->expectExceptionMessage('Name has to be string');
		$valuestore->put(5, true);
	}

	public function test_get_when_not_existing() {
		$valuestore = new Valuestore($this->path);
		$this->expectExceptionMessage('Setting test is missing');
		$valuestore->get('test');
	}

	public function test_get_working() {
		$valuestore = new Valuestore($this->path);
		$value = $valuestore->get('one');
		$this->assertEquals('test', $value);
	}

	public function test_get_allStartingWith() {
		$valuestore = new Valuestore($this->path);
		$values = $valuestore->allStartingWith('two');
		$this->assertEquals([
			'two' => 'test2',
			'two_two' => 'test2'
		], $values);
	}

	public function test_get_empty_array_when_none_starting_with(){
		$valuestore = new Valuestore($this->path);
		$values = $valuestore->allStartingWith('test');
		$this->assertEquals([],$values);
	}
}
