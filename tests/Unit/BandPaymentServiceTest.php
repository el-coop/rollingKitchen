<?php

namespace Tests\Unit;

use App\Models\Band;
use App\Models\BandPaymentExportColumn;
use App\Models\BandSchedule;
use App\Models\Stage;
use App\Models\User;
use App\Services\BandPaymentService;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class BandPaymentServiceTest extends TestCase {
	protected $bands;
	protected $bandPaymentsColumns;
	protected $bandPaymentService;

	protected function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub
		$stage = Stage::factory()->create();
		$this->bands = Band::factory(4)->create()->each(function ($band) use ($stage){
			$band->user()->save( User::factory()->make());
			BandSchedule::factory()->create([
				'stage_id' => $stage->id,
				'approved' => 'accepted',
				'payment' => 30,
				'band_id' => $band->id,
			]);
		});
		$columns = ['user.name', 'user.email'];
		$i = -1;
		$this->bandPaymentsColumns = BandPaymentExportColumn::factory(2)->make()->each(function ($column) use ($columns,$i){
			$i = $i + 1;
			$column->column = $columns[$i];
			$column->orded = $i;
		});
		$this->bandPaymentService = new BandPaymentService;
	}

	public function test_sets_heading() {
		$headings = $this->bandPaymentService->headings();
		$expectedHeadings = BandPaymentExportColumn::orderBy('order')->get()->pluck('name')->toArray();
		$this->assertEquals($expectedHeadings, $headings);
	}

	public function test_collection() {
		$collection = $this->bandPaymentService->collection();
		$data = $this->collect();
		$this->assertEquals($data, $collection);
	}

	public function collect() {
		$bands = Band::whereHas('schedules', function ($query) {
			$query->where('approved', 'accepted');
		})->get();
		$fields = BandPaymentExportColumn::orderBy('order')->get()->pluck('column');
		$data = collect();
		foreach ($bands as $band) {
			$data->push($this->listData($fields, $band));
		}
		return $data;
	}

	/**
	 * @param $fields
	 * @param $band
	 * @return \Illuminate\Support\Collection
	 */
	protected function listData($fields, Band $band): \Illuminate\Support\Collection {
		$result = collect();
		foreach ($fields as $field) {
			$model = strtok($field, '.');
			$column = strtok('.');
			if ($model == 'band') {
				if ($column == 'totalPayment') {
					$result->push($band->approvedPayments);

				} else {
					$column = Field::find($column)->id;
					$result->push($band->data[$column] ?? '');
				}
			} else {
				$result->push($band->user->$column);
			}
		}
		return $result;
	}
}
