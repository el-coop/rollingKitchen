<?php

namespace Tests\Unit;

use App\Models\Application;
use App\Models\Kitchen;
use App\Models\Service;
use App\Models\User;
use App\Services\KitchenServicesService;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class KitchenServicesServiceTest extends TestCase {

	use RefreshDatabase;
	private $services;
	private $kitchenServicesService;
	private $kitchens;


	protected function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub
		$applicationYear = app('settings')->get('registration_year');

		$this->services = factory(Service::class, 10)->create();
		$this->kitchenServicesService = new KitchenServicesService;
		$this->kitchens = factory(Kitchen::class, 5)->create()->each(function ($kitchen) use ($applicationYear) {
			$kitchen->user()->save(factory(User::class)->make());
			$application = factory(Application::class)->make(['year' => $applicationYear ?? now()->year]);
			$kitchen->applications()->save($application);
			Service::inRandomOrder()->limit(3)->get()->each(function ($service) use ($application) {
				$application->services()->save($service, ['quantity' => random_int(1, 5)]);
			});
		});
	}

	public function test_sets_heading() {
		$headings = $this->kitchenServicesService->headings();
		$services = Service::all()->pluck('name_' . app()->getLocale())
			->prepend(__('auth.kitchenName'))
			->prepend(__('admin/applications.number'))
			->toArray();
		$this->assertEquals($services, array_values($headings));
	}

	public function test_collection() {
		$collection = $this->kitchenServicesService->collection();
		$applicationYear = app('settings')->get('registration_year');

		$data = collect();

		$applications = Application::where('year', $applicationYear)->where('status', 'accepted')->with('kitchen.user', 'services')->get();

		foreach ($applications as $application) {
			$dataRow = collect();
			$dataRow->push($application->number);
			$dataRow->push($application->kitchen->user->name);
			foreach ($this->services as $service) {
				$column = 0;

				if ($application->hasService($service)) {
					$column = $application->serviceQuantity($service);
				}
				$dataRow->push($column);
			}
			$data->push($dataRow);
		}
		$this->assertEquals($data, $collection);
	}
}
